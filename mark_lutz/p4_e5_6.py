"""
5. Словарные инструменты. Напишите функцию по имени copyDict (dict), которая копирует свой аргумент типа словаря.
Она должна возвращать новый словарь, содержащий все элементы из своего аргумента. Используйте для итерации словарный
метод keys (или в Python 2.2 и последующих версиях проходите по словарю, не вызывая keys).
Копировать последовательности легко (X [: ] создает копию верхнего уровня); работает ли такой прием также для словарей?
Как объясняется в решении этого упражнения, поскольку словари теперь снабжены похожими инструментами, текущее
и следующее упражнения являются лишь тренировкой в написании кода, но все-таки служат характерными примерами функций.
6. Словарные инструменты. Напишите функцию по имени addDict (dictl, dict2), которая вычисляет объединение двух словарей.
Она должна возвращать новый словарь, содержащий все элементы из своих двух аргументов (по предположению
являющиеся словарями). Если в обоих аргументах встречается один и тот же ключ, выбирайте значение из любого
по своему усмотрению. Протестируйте написанную функцию, запустив файл как сценарий. Что произойдет, если передать
списки вместо словарей? Как можно было бы обобщить функцию для обработки такого случая? (Подсказка: примените
упомянутую ранее встроенную функцию type.) Имеет ли значение порядок, в котором передаются аргументы?
"""


def copyDict(d):
    return d.copy()


def copyDict1(old):  # Без использования метода .copy
    new = {}
    for key in old.keys():
        new[key] = old[key]
    return new


def addDict(d1, d2):
    new = {}
    new.update(d1)
    new.update(d2)
    return new


def addDict1(d1, d2):  # Без использования метода .update
    new = {}
    for key in d1:
        new[key] = d1[key]
    for key in d2:
        new[key] = d2[key]
    return new
